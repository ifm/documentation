image: ubuntu:22.04

stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

vale-linting:
  image:
    name: jdkato/vale:latest
    entrypoint: [""]
  stage: build
  allow_failure: true  
  before_script:
    - apk update && apk add git
  script:
    - git config --global user.email ${GITLAB_USER_EMAIL}
    - git config --global user.name ${GITLAB_USER_NAME}
    - rm -rf /builds/syntron/support/csr/o3r/formatting-tools /builds/syntron/support/csr/o3r/vale
    - mkdir -p /builds/syntron/support/csr/o3r/formatting-tools
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab-ee.dev.ifm/syntron/support/csr/formatting-tools.git /builds/syntron/support/csr/o3r/formatting-tools
    - cd /builds/syntron/support/csr/o3r/formatting-tools
    - vale --minAlertLevel error /builds/syntron/support/csr/o3r/documentation/.

auto-docs-generation:
  stage: build
  image: python:3.12-slim
  allow_failure: true
  before_script:
    - pip install --extra-index-url https://nexus3.dev.ifm/repository/syn-hosted-pypi/simple ci-helpers
    - apt update && apt install -y jq unzip git curl unzip
  script: 
    - source .config
    # Only run the job if the version has changed
    - if [ -f .last_firmware_version ]; then
        if cmp -s .last_firmware_version ${FIRMWARE_VERSION}; then
          echo "Version has not changed. Skipping job.";
          exit 0;
        fi;
      fi;
    - echo ${FIRMWARE_VERSION} > .last_firmware_version
    - latest-from-nexus -n "*meta-ifm-o3r.spdx.json" --type file --repo-path "/gitlab/artifacts/OVP8xx/release/OVP81x/v${FIRMWARE_VERSION}*" --repo "syn-raw-o3r" --download --download-folder .
    - if [ ! -f "meta-ifm-o3r.spdx.json" ]; then
        echo "Error, meta-ifm-o3r.spdx.json was not downloaded.";
        exit 1;
      fi;
    # Read out the parameter version from the meta file shipped with the firmware
    # - PARAMETER_VERSION=$(jq -r '.packages[] | select(.name == "parameter-specification") | .versionInfo' meta-ifm-o3r.spdx.json) 
    - PARAMETER_VERSION="v1.20.5"
    - latest-from-nexus -n "*parameter-specification.zip" --type file --repo-path "/gitlab/artifacts/euphrates/release/parameter-specification/${PARAMETER_VERSION}" --repo "syn-raw-o3r" --download --download-folder .
    - unzip parameter-specification.zip -d parameter-specification
    # Read out the diagnostic version from the meta file
    - DIAGNOSTIC_VERSION=$(jq -r '.packages[] | select(.name == "diagnostics-definition") | .versionInfo' meta-ifm-o3r.spdx.json)
    # Get the job number so we can retrieve the right artifacts. 
    # 1942 is the project id for diagnostics-definition 
    ## Todo: figure out how to automatically retrieve the job ID, to use to download the right artifacts
    #- 'curl --output job_id --header "PRIVATE-TOKEN: ${DIAG_TOKEN}" "https://gitlab-ee.dev.ifm/api/v4/projects/1942/jobs?ref=${DIAGNOSTIC_VERSION}&name=generate"'
    #- cat job_id
    #- 'JOB_ID=$(curl --silent --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "https://gitlab-ee.dev.ifm/api/v4/projects/1942/jobs?ref=${DIAGNOSTIC_VERSION}&name=generate"| jq -r ".[0].id")'
    #- 'echo "The most recent job ID is: $JOB_ID"'
    - 'curl --location --output artifacts.zip --header "JOB-TOKEN: ${CI_JOB_TOKEN}" "https://gitlab-ee.dev.ifm/api/v4/projects/1942/jobs/2160894/artifacts"'
    - unzip artifacts.zip
    - mv out/json/40-definitions.json .
    - ls -la
    - pip install -r .scripts/requirements.txt 
    - python3 .scripts/json_to_md.py 
  after_script:
    # Commit and push the generated files
    - git config --global user.email ${GITLAB_USER_EMAIL}
    - git config --global user.name ${GITLAB_USER_NAME}
    - git remote set-url --push origin "https://${CI_PUSHER}@gitlab-ee.dev.ifm/syntron/support/csr/o3r/documentation.git"
    - git add generated_docs/* .last_firmware_version
    - git commit -m "Update generated documentation for firmware version ${FIRMWARE_VERSION}" || echo "No changes to commit"
    - git push origin HEAD:$CI_COMMIT_REF_NAME -o ci.skip
  rules:
    - changes: 
      - .config
    - when: manual    

trigger_developer-portal:
  stage: deploy
  rules:
    - when: always
  before_script:
    - apt update && apt install -y curl
  script:
    - >
      curl --request POST \
        --form token=$DEVELOPER_PORTAL_TRIGGER_TOKEN \
        --form ref=test/lola \
        --form "variables[O3R_DOC_BRANCH]=$CI_COMMIT_REF_NAME" \
        https://gitlab-ee.dev.ifm/api/v4/projects/2070/trigger/pipeline